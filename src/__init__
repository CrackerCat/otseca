#!/usr/bin/env bash

# shellcheck shell=bash

################################################################################
######################### Main function (script init) ##########################
################################################################################

function __main__() {

  local _FUNCTION_ID="__main__"
  local _STATE="0"

  # Stores the current date.
  readonly _cdate=$(date +%Y%m%d)

  # Variables related to the log file. Divided into three parts due
  # to the better possibility of manipulation for the user.
  # shellcheck disable=SC2154
  readonly _log_directory="${_rel}/log"
  # shellcheck disable=SC2154
  readonly _log_file="${_init_name}.${_cdate}.log"
  readonly _log_stdout="${_log_directory}/stdout.log"
  readonly _log_path="${_log_directory}/${_log_file}"

  # Set script version.
  local _version="v1.0.1"

  # We check if we are a root user.
  if [[ "$EUID" -ne 0 ]] ; then

    printf "EUID is not equal 0 (no root user)\\n"
    _exit_ "1"

  fi

  # Path to import file.
  # shellcheck disable=SC2154
  readonly _import_path="${_src}/import"

  # shellcheck disable=SC2154
  # External configuration file (-c|--config script param).
  config="${_etc}/${_init_name}.conf"
  load_state="1"

  # Declaration of output variables (--debug and --verbose params).
  stdout_mode=""
  printf_mode="verbose"

  # Do not exit with nonzero on commands failed.
  ignore_errors="0"

  # Enable/disable output colors.
  # shellcheck disable=SC2034
  s_color="true"

  # Format type (set default).
  format_type="html"

  # shellcheck disable=SC2034
  # Stores menu variables.
  _menu_stack=()

  # shellcheck disable=SC2154
  # Temporary output file.
  # readonly _tmpA=$(mktemp "${_tmp}/output.XXXXXXXX")
  # readonly _tmpB=$(mktemp "${_tmp}/output.XXXXXXXX")

  # We place here used commands at script runtime, as strings to anything
  # unnecessarily run.
  readonly commands=("basename" "dirname" "stat" "date" "grep" "egrep" "cut" \
                     "sed" "gzip" "tar" "mktemp")

  # If you intend to specify the full path to the command we do it like:
  # readonly exec_gzip="/bin/gzip"

  # Stores the names of the missing commands.
  missing_hash=()
  missing_counter="0"

  for i in "${commands[@]}" ; do

    if [[ ! -z "$i" ]] ; then

      hash "$i" >/dev/null 2>&1 ; state="$?"

      # If the command was not found put it in the array
      if [[ "$state" -ne 0 ]] ; then

        missing_hash+=("$i")
        ((missing_counter++))

      fi

    fi

  done

  # It is a good idea to terminate the script at this stage
  # with information for the user to fix the errors if at least one
  # of the required commands in the commands array is not found.
  if [[ "$missing_counter" -gt 0 ]] ; then

    printf "not found in PATH: %s\\n" "${missing_hash[*]}" >&2
    _exit_ "1"

  fi

  # shellcheck disable=SC2154
  _logger "init" \
    "init '${_init_name}' in '${_init_directory}'" && \
  _logger "info" \
    "__init_params[] = (${__init_params[*]})," \
    "__script_params[] = (${__script_params[*]})"

  # Include import file.
  _load "null" "$_import_path"

  # Specifies the call parameters of the script, the exact description
  # can be found in _help_ and file README.md.
  local _short_opt="f:i"
  local _long_opt="help,format:,ignore-failed"

  _GETOPT_PARAMS=$(getopt -o "${_short_opt}" --long "${_long_opt}" \
                   -n "${_init_name}" -- "${__script_params[@]}")

  # With this structure, in the case of problems with the parameters placed
  # in the _GETOPT_PARAMS variable we finish the script. Keep this in mind
  # because it has some consequences - the __main __() function will not be
  # executed.

  # Ends an error if the parameter or its argument is not valid.
  _getopt_state="$?"
  if [ "$_getopt_state" != 0 ] ; then
    _exit_ "1"
  # Ends if no parameter is specified.
  # elif [[ "${#__script_params[@]}" -eq 0 ]] ; then
  #   _exit_ "0"
  fi

  eval set -- "$_GETOPT_PARAMS"
  while true ; do

    case $1 in

      --help)

        _help_

        shift ; _exit_ "0" ;;

      -f|--format)

        export format_type="$2"

        shift 2 ;;

      --ignore-failed)

        export ignore_errors="1"

        shift ;;

      *)

        if [[ "$2" == "-" ]] || [[ ! -z "$2" ]] ; then

          printf "%s: invalid option -- '%s'\\n" "$_init_name" "$2"
          _exit_ "1"

        # elif [[ -z "$2" ]] ; then break ; fi
        else break ; fi

        ;;

    esac

  done

  # If you run the script in debug mode, the information
  # will be displayed on the screen from this point.
  if [[ "$stdout_mode" == "debug" ]] ; then

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "starting debug mode"

  fi

  # Running tasks before start user functions.
  _before_init

  ################################# USER SPACE #################################
  # ````````````````````````````````````````````````````````````````````````````
  # Put here all your variable declarations, function calls
  # and all the other code blocks.

  # In this section we add external file (for -c|--config script param).
  if [[ "$load_state" -eq 1 ]] ; then _load "head" "$config" ; fi

  # shellcheck disable=SC2034
  # Generate random value.
  _random=$(date +"%s")

  # Only if you used -verbose and --debug script parameters
  # - checking the relationship between call parameters.
  if [[ "$stdout_mode" == "debug" ]] ; then

    if [[ "$printf_mode" == "verbose" ]] ; then

      _sprintf "stop" "debug mode can not occur together with '--verbose'"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "debug mode can not occur together with '--verbose'"

    fi

  fi

  # Array that stores the names of variables used that are part of the script
  # call parameters (_GETOPT_PARAMS). Useful when checking whether all
  # or selected parameters without which the script can not work properly
  # have been used. Do not add the load_state variable to the _opt_values array,
  # which is supported above.
  _opt_values=()

  # Checking the value of the variables (if they are unset or empty):
  #   - variables for call parameters
  #   - variables from the additional configuration files
  if [[ "${#_opt_values[@]}" -ne 0 ]] ; then

    for i in "${_opt_values[@]}" ; do

      _i="" ; eval _i='$'"$i"

      _logger "info" \
        "${_FUNCTION_ID}()" \
        "$i: '$_i'"

      if [[ -z "$_i" ]] ; then

        _sprintf "stop" "error of argument value: '$i' is unset or empty"

        _logger "stop" \
          "${_FUNCTION_ID}()" \
          "error of argument value: '$i' is unset or empty"

      fi

    done

  fi

  clear

  _t_rst="0"
  _c_rst="6"

  _t_sst="61"

  _t_bar="2;39"

  # ----------------------------------------------------------------------------

  _t_rst=$((_t_rst + 1))
  tput cup "$_t_rst" "$_c_rst"

  printf "\\e[${_t_bar}m%s\\e[m" \
         "┌────────────────────────────────────────────────────────────┐"

  # ----------------------------------------------------------------------------

  _t_rst=$((_t_rst + 1))
  tput cup "$_t_rst" "$_c_rst" ; printf "\\e[${_t_bar}m%s\\e[m" "│"
  tput cup "$_t_rst" $((_t_sst + _c_rst)) ; printf "\\e[${_t_bar}m%s\\e[m" "│"

  # ----------------------------------------------------------------------------

  _t_rst=$((_t_rst + 1))
  tput cup "$_t_rst" "$_c_rst" ; printf "\\e[${_t_bar}m%s\\e[m" "│"

  printf "%s\\e[1;31m%s\\e[m \\e[2;32m%s\\e[m \\e[1;37m%s\\e[m \\e[1;41m%s\\e[m" \
         "           " \
         "Φ"  \
         "otseca" \
         "$_version" \
         "security audit script"

  tput cup "$_t_rst" $((_t_sst + _c_rst)) ; printf "\\e[${_t_bar}m%s\\e[m" "│"

  # ----------------------------------------------------------------------------

  _t_rst=$((_t_rst + 1))
  tput cup "$_t_rst" "$_c_rst"; printf "\\e[${_t_bar}m%s\\e[m" "│"
  tput cup "$_t_rst" $((_t_sst + _c_rst)) ; printf "\\e[${_t_bar}m%s\\e[m" "│"

  # ----------------------------------------------------------------------------

  _t_rst=$((_t_rst + 1))
  tput cup "$_t_rst" "$_c_rst" ; printf "\\e[${_t_bar}m%s\\e[m" "│"

  printf "%s\\e[1;37m%s\\e[m \\e[2;37m%s\\e[m" \
         "        " \
         "Project:"  \
         "https://github.com/trimstray/otseca"

  tput cup "$_t_rst" $((_t_sst + _c_rst)) ; printf "\\e[${_t_bar}m%s\\e[m" "│"

  # ----------------------------------------------------------------------------

  _t_rst=$((_t_rst + 1))
  tput cup "$_t_rst" "$_c_rst" ; printf "\\e[${_t_bar}m%s\\e[m" "│"
  tput cup "$_t_rst" $((_t_sst + _c_rst)) ; printf "\\e[${_t_bar}m%s\\e[m" "│"

  # ----------------------------------------------------------------------------

  _t_rst=$((_t_rst + 1))
  tput cup "$_t_rst" "$_c_rst" ; printf "\\e[${_t_bar}m%s\\e[m" "│"

  printf "%s\\e[0;36m%s\\e[m" \
         "               " \
         "Debian GNU/Linux, CentOS Linux"

  tput cup "$_t_rst" $((_t_sst + _c_rst)) ; printf "\\e[${_t_bar}m%s\\e[m" "│"

  # ----------------------------------------------------------------------------

  _t_rst=$((_t_rst + 1))
  tput cup "$_t_rst" "$_c_rst" ; printf "\\e[${_t_bar}m%s\\e[m" "│"
  tput cup "$_t_rst" $((_t_sst + _c_rst)) ; printf "\\e[${_t_bar}m%s\\e[m" "│"

  # ----------------------------------------------------------------------------

  _t_rst=$((_t_rst + 1))
  tput cup "$_t_rst" "$_c_rst" ;

  printf "\\e[${_t_bar}m%s\\e[m" \
         "└────────────────────────────────────────────────────────────┘"

  # ----------------------------------------------------------------------------

  _t_rst=$((_t_rst + 2))
  tput cup "$_t_rst" "$_c_rst"

  # ----------------------------------------------------------------------------

  _sdate=$(date +%s)

  echo

  _sprintf "head" "Init environment"

  # shellcheck disable=SC2154
  if [[ ! -d "$_out" ]] ; then

    printf "     \\e[2;2;37m%s\\e[m \\e[1;1;38m%s\\e[m\\n" \
           "•" "set output directory"

    mkdir -p "$_out"

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "create output directory: $_out"

  fi

  printf "     \\e[2;2;37m%s\\e[m \\e[1;1;38m%s\\e[m\\n" \
         "•" "set dump directory: dump.${_sdate}"

  # shellcheck disable=SC2154
  _dump_dir="${_out}/dump.${_sdate}"

  mkdir -p "${_dump_dir}"

  _logger "info" \
    "${_FUNCTION_ID}()" \
    "create dump directory: ${_dump_dir}"

  printf "     \\e[2;2;37m%s\\e[m \\e[1;1;38m%s\\e[m\\n" \
         "•" "set log file: dump.log"

  # shellcheck disable=SC2034
  _dump_log="${_dump_dir}/dump.log"

  # ----------------------------------------------------------------------------

  echo

  _sprintf "head" "Dump system information"

  _tcount=0

  _TASKS=("${SYSTEM_STACK[@]}" "${FS_STACK[@]}" "${PERMISSIONS_STACK[@]}" \
          "${SERVICES_STACK[@]}" "${NETWORK_STACK[@]}" "${OTHER_STACK[@]}")

  for _res in "${_TASKS[@]}" ; do

    # shellcheck disable=SC2034
    _tdate=$(date +%s)

    printf "   \\e[1;0;36m%s\\e[m \\e[2;2;37m%s\\e[m \\e[1;1;38m%s\\e[m" \
           " " "•" "${_res}"

    _init_function "DumpSysInfo \"${_res}\""

    _tcount=$((_tcount + 1))

  done

  # ----------------------------------------------------------------------------

  echo

  _sprintf "head" "Generate html report"

  _fdate=$(date "+%d.%m.%Y %H:%M:%S")

  # shellcheck disable=SC2154
  _default_report="${_temp}/report"
  _report="${_out}/report.${_sdate}"

  if [[ -d "${_report}" ]] ; then

    rm -fr "${_report}"

  fi

  if [[ "$format_type" == "html" ]] ; then

    printf "     \\e[2;2;37m%s\\e[m \\e[1;1;38m%s\\e[m\\n" \
           "•" "set format: $format_type"

    rsync -a --delete \
    "${_default_report}/" "${_report}" 2>&1

  elif [[ "$format_type" == "raw-html" ]] ; then

    printf "     \\e[2;2;37m%s\\e[m \\e[1;1;38m%s\\e[m\\n" \
           "•" "set format: $format_type"

    rsync -a --delete \
    --exclude 'css' \
    --exclude 'fonts' \
    --exclude 'js' \
    --exclude 'vendor' \
    "${_default_report}/" "${_report}" 2>&1

  else

    printf "     \\e[2;2;37m%s\\e[m \\e[1;1;38m%s\\e[m\\n" \
           "•" "set format: html"

    rsync -a --delete \
    "${_default_report}/" "${_report}" 2>&1

  fi

  # shellcheck disable=SC2034,SC2154
  _output_report="${_report}/index.html"
  # shellcheck disable=SC2034,SC2154
  _output_prefix="${_report}/prefix.html"
  # shellcheck disable=SC2034,SC2154
  _output_postfix="${_report}/postfix.html"
  # shellcheck disable=SC2034,SC2154
  _output_data="${_report}/body.html"

  :> "${_output_report}"
  :> "${_output_data}"

  _wdir=$(pwd)

  # shellcheck disable=SC2154,SC2164
  cd "${_dump_dir}"

  printf "     \\e[2;2;37m%s\\e[m \\e[1;1;38m%s\\e[m\\n" \
         "•" "create output report"

  for i in $(find . -type f | sort -n -k 2) ; do

    # shellcheck disable=SC2034
    _command=$(grep "__COMMAND__" "$i" | cut -d ":" -f2)
    # shellcheck disable=SC2034
    _output=$(grep -v "__COMMAND__" "$i")

    _init_function "GenReport"

  done

  cat "${_output_prefix}" "${_output_data}" "${_output_postfix}" \
  >> "${_output_report}"

  sed -i "s/__VERSION__/${_version}/g" "${_output_report}"
  sed -i "s/__DATE__/${_fdate}/g" "${_output_report}"

  for i in "${_output_prefix}" "${_output_postfix}" "${_output_data}" ; do

    if [[ -e "$i" ]] ; then

      rm -fr "${i}"

    fi

  done

  if [[ -d "${_dump_dir}" ]] ; then

    rm -fr "${_dump_dir}"

  fi

  # shellcheck disable=SC2154,SC2164
  cd "${_wdir}"

  echo

  # ````````````````````````````````````````````````````````````````````````````

  return "$_STATE"

}
